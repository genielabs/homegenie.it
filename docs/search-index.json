
{"keys":[{"path":["title"],"id":"title","weight":1,"src":"title","getFn":null},{"path":["description"],"id":"description","weight":1,"src":"description","getFn":null},{"path":["content"],"id":"content","weight":1,"src":"content","getFn":null}],"records":[{"i":0,"$":{"0":{"v":"Introduction","n":1},"1":{"v":"HomeGenie automation features, customization and programming","n":0.408},"2":{"v":"## More than just Smart Home Despite the name, HomeGenie is not just a *Smart Home* server. HomeGenie is a **general-purpose automation server** that routes and processes &quot;signals&quot; and that integrates a series of tools to customize the user interface and the system *intelligence* by the mean of small *automation programs* and *widgets* that can be implemented and tested directly in the browser. It is exactly the set of installed widgets and programs that determines and shapes this general-purpose automation system into something specific, like a *Smart Home Server*, a *Smart Thermost","n":0.104}}},{"i":1,"$":{"0":{"v":"Scheduler","n":1},"1":{"v":"HomeGenie Scheduler","n":0.707},"2":{"v":"## Time-based automation From the *Scheduler* page you can display, edit and create time-based events. Scheduler events can be used to trigger at a given time the execution of a scene, a program, or other automated workflows such as scheduling thermostat modes based on time slots and period of the year. ### Event list The list of events is organized into three sections. The first is the list of events actually scheduled on the selected day, which by default is today&#39;s date, and which can be modified clicking the calendar {% zx &#39;icon&#39; %}today{% endzx %} button located at the end of ","n":0.099}}},{"i":2,"$":{"0":{"v":"Scenes","n":1},"1":{"v":"Implementing scenes with visual programming","n":0.447},"2":{"v":"## Easy and effective With *HomeGenie*, you can create common automation tasks and scenes effortlessly. No need to learn or use any programming language to customize your smart system. ## Visual programming With the *Visual Program* editor, you can create a scene by just interacting with widgets or by dragging and dropping commands from the *Blocks* toolbox located on the left side of the visual editor area. The logic flow and the commands of the scene are in fact represented as colored blocks that can be easily modified and rearranged with your fingertips without ever writing a single line of","n":0.1}}},{"i":3,"$":{"0":{"v":"Creating a Smart Thermostat üå°Ô∏è","n":0.447},"1":{"v":"How to create a Smart Thermostat with Raspberry Pi and HomeGenie in three simple steps","n":0.258},"2":{"v":"## Ingredients - a Raspberry Pi with [HomeGenie installed](../../getting-started) (a model [Zero 2 W](https://www.raspberrypi.com/products/raspberry-pi-zero-2-w/) is cheap and perfect for this) - a DHT-xx humidity and temperature sensor (DHT-11 or DHT-22) - a Relay Switch **What you will get** A smart thermostat that **works 100% offline** and where **your own your data**, with logging, statistics, powerful scheduler, automation engine, smart-home-ready gateway with support for ZigBee, Z-Wave and X10, UPnP/DLNA control point, and more... **all for less than $25**. ### Step 1 - connecting compo","n":0.11}}},{"i":4,"$":{"0":{"v":"Getting started","n":0.707},"1":{"v":"Downloading and installing HomeGenie","n":0.5},"2":{"v":"## Installing HomeGenie Server {{ release_name }} {% unpre %} ```html Select target architecture: Windows 64-bit Mac OSX 64-bit Linux 64-bit Linux ARM 32-bit Linux ARM 64-bit .button { width: 280px; font-size: 150%; font-weight: bold; color: var(--accent-color); } div[id] { display: none; } div[id].selected { display: block; } function setTargetArchitecture(arch) { document.querySelectorAll(&#39;.setup-code div[id]&#39;).forEach((c) =&gt; { c.classList.remove(&#39;selected&#39;); }); const selected = document.querySelector(&#39;#&#39; + arch); selected.classList.add(&#39;selected&#39;); } Ente","n":0.123}}},{"i":5,"$":{"0":{"v":"Setup","n":1},"1":{"v":"Initial setup and configuration","n":0.5},"2":{"v":"## Initial setup When you open HomeGenie UI after the installation (or after a factory reset), the *Setup Wizard* will walk you through a couple of simple steps to set the base configuration of your system. Here you can enable built-in drivers for Raspberry Pi or other single board computers, and smart home dongles. If at this time you just want to try HomeGenie without using additional drivers or hardware, you can choose to install the **demo** package which includes virtual devices such as smart thermostats, switches, color lights, and a device activity simulator. However, all these settings","n":0.101}}},{"i":6,"$":{"0":{"v":"Client preferences","n":0.707},"1":{"v":"Setting up client preferences","n":0.5},"2":{"v":"## Setting client language, theme and units Client preferences such as displayed language, units, theme colors, and dashboards configuration, are stored on the server. You can create and store an arbitrary number of client presets and quickly recall them from the list of presets on the client preferences page. const video= document.getElementById(&#39;video1&#39;); video.addEventListener(&#39;ended&#39;,function(){ video.load(); },false); After selecting a preset, any changes made to widgets placement, theme, and other client preferences will be updated on the server and will affect all other ","n":0.111}}},{"i":7,"$":{"0":{"v":"Getting started - Optional steps","n":0.447},"1":{"v":"Optional installation steps","n":0.577},"2":{"v":"## Optional post-installation steps ### Running as a system service HomeGenie can be installed as a service. The procedure is different depending on the hosting operating system. #### Recommended procedure for Linux 1) Add a specific user for the service and copy the content of `homegenie` folder to the new user home directory: ```shell sudo useradd homegenie sudo cp -ar ./path-to-extracted-folder/homegenie /home/homegenie sudo chown -R homegenie:homegenie /home/homegenie ``` 2) Create the file `/etc/systemd/system/homegenie.service` with the following content: ```shell [Unit] Description=Home","n":0.112}}},{"i":8,"$":{"0":{"v":"System settings","n":0.707},"1":{"v":"HomeGenie system settings","n":0.577},"2":{"v":"## Configuration Through the system settings page you can configure the built-in interface drivers and other options implemented by automation programs such as *&quot;Remote Control&quot;* and *&quot;Weather Forecast&quot;*. Depending on installed packages and custom programs, a different number of configuration options will be available. ## Packages Packages are basically a collections of automation programs that implement and extend the functionality of the system. A package usually contains programs that add a specific set of features. For instance, the `homegenie-home` package contains sma","n":0.11}}},{"i":9,"$":{"0":{"v":"Dashboards","n":1},"1":{"v":"Configuring dashboards and widgets","n":0.5},"2":{"v":"## Managing dashboards Clicking the menu button {% zx &#39;icon&#39; %}menu{% endzx %} on the application bar you can open the side drawer and have a summary of dashboards and navigate through them. The side drawer can eventually be fixed by clicking the push pin button {% zx &#39;icon&#39; %}push_pin{% endzx %} located at the bottom right. Next to the drawer button, the dashboard menu {% zx &#39;icon&#39; %}dashboard{% endzx %} can be used to add new dashboards and managing the current one. const video= document.getElementById(&#39;video1&#39;); video.addEventListener(&#39;ended&#39;,function","n":0.107}}}]}
